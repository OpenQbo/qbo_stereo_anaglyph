/* Auto-generated by genmsg_cpp for file /opt/ros/electric/stacks/hrl/hrl_srvs/srv/None_Float.srv */
#ifndef HRL_SRVS_SERVICE_NONE_FLOAT_H
#define HRL_SRVS_SERVICE_NONE_FLOAT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hrl_srvs
{
template <class ContainerAllocator>
struct None_FloatRequest_ {
  typedef None_FloatRequest_<ContainerAllocator> Type;

  None_FloatRequest_()
  {
  }

  None_FloatRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "hrl_srvs/None_FloatRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "1b1594d2b74931ef8fe7be8e2d594455"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrl_srvs::None_FloatRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct None_FloatRequest
typedef  ::hrl_srvs::None_FloatRequest_<std::allocator<void> > None_FloatRequest;

typedef boost::shared_ptr< ::hrl_srvs::None_FloatRequest> None_FloatRequestPtr;
typedef boost::shared_ptr< ::hrl_srvs::None_FloatRequest const> None_FloatRequestConstPtr;


template <class ContainerAllocator>
struct None_FloatResponse_ {
  typedef None_FloatResponse_<ContainerAllocator> Type;

  None_FloatResponse_()
  : value(0.0)
  {
  }

  None_FloatResponse_(const ContainerAllocator& _alloc)
  : value(0.0)
  {
  }

  typedef double _value_type;
  double value;


private:
  static const char* __s_getDataType_() { return "hrl_srvs/None_FloatResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1b1594d2b74931ef8fe7be8e2d594455"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "1b1594d2b74931ef8fe7be8e2d594455"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 value\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(value);
    return size;
  }

  typedef boost::shared_ptr< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrl_srvs::None_FloatResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct None_FloatResponse
typedef  ::hrl_srvs::None_FloatResponse_<std::allocator<void> > None_FloatResponse;

typedef boost::shared_ptr< ::hrl_srvs::None_FloatResponse> None_FloatResponsePtr;
typedef boost::shared_ptr< ::hrl_srvs::None_FloatResponse const> None_FloatResponseConstPtr;

struct None_Float
{

typedef None_FloatRequest Request;
typedef None_FloatResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct None_Float
} // namespace hrl_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::None_FloatRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::hrl_srvs::None_FloatRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/None_FloatRequest";
  }

  static const char* value(const  ::hrl_srvs::None_FloatRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::hrl_srvs::None_FloatRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::None_FloatResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b1594d2b74931ef8fe7be8e2d594455";
  }

  static const char* value(const  ::hrl_srvs::None_FloatResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1b1594d2b74931efULL;
  static const uint64_t static_value2 = 0x8fe7be8e2d594455ULL;
};

template<class ContainerAllocator>
struct DataType< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/None_FloatResponse";
  }

  static const char* value(const  ::hrl_srvs::None_FloatResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 value\n\
\n\
\n\
";
  }

  static const char* value(const  ::hrl_srvs::None_FloatResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hrl_srvs::None_FloatRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct None_FloatRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hrl_srvs::None_FloatResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct None_FloatResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hrl_srvs::None_Float> {
  static const char* value() 
  {
    return "1b1594d2b74931ef8fe7be8e2d594455";
  }

  static const char* value(const hrl_srvs::None_Float&) { return value(); } 
};

template<>
struct DataType<hrl_srvs::None_Float> {
  static const char* value() 
  {
    return "hrl_srvs/None_Float";
  }

  static const char* value(const hrl_srvs::None_Float&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hrl_srvs::None_FloatRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b1594d2b74931ef8fe7be8e2d594455";
  }

  static const char* value(const hrl_srvs::None_FloatRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hrl_srvs::None_FloatRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/None_Float";
  }

  static const char* value(const hrl_srvs::None_FloatRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hrl_srvs::None_FloatResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b1594d2b74931ef8fe7be8e2d594455";
  }

  static const char* value(const hrl_srvs::None_FloatResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hrl_srvs::None_FloatResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/None_Float";
  }

  static const char* value(const hrl_srvs::None_FloatResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HRL_SRVS_SERVICE_NONE_FLOAT_H

