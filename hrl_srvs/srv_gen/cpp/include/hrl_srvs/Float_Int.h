/* Auto-generated by genmsg_cpp for file /opt/ros/electric/stacks/hrl/hrl_srvs/srv/Float_Int.srv */
#ifndef HRL_SRVS_SERVICE_FLOAT_INT_H
#define HRL_SRVS_SERVICE_FLOAT_INT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hrl_srvs
{
template <class ContainerAllocator>
struct Float_IntRequest_ {
  typedef Float_IntRequest_<ContainerAllocator> Type;

  Float_IntRequest_()
  : value(0.0)
  {
  }

  Float_IntRequest_(const ContainerAllocator& _alloc)
  : value(0.0)
  {
  }

  typedef double _value_type;
  double value;


private:
  static const char* __s_getDataType_() { return "hrl_srvs/Float_IntRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1b1594d2b74931ef8fe7be8e2d594455"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "9f744029c1815d8e33a503bee0560de0"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 value\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(value);
    return size;
  }

  typedef boost::shared_ptr< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrl_srvs::Float_IntRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Float_IntRequest
typedef  ::hrl_srvs::Float_IntRequest_<std::allocator<void> > Float_IntRequest;

typedef boost::shared_ptr< ::hrl_srvs::Float_IntRequest> Float_IntRequestPtr;
typedef boost::shared_ptr< ::hrl_srvs::Float_IntRequest const> Float_IntRequestConstPtr;


template <class ContainerAllocator>
struct Float_IntResponse_ {
  typedef Float_IntResponse_<ContainerAllocator> Type;

  Float_IntResponse_()
  : retval(0)
  {
  }

  Float_IntResponse_(const ContainerAllocator& _alloc)
  : retval(0)
  {
  }

  typedef int8_t _retval_type;
  int8_t retval;


private:
  static const char* __s_getDataType_() { return "hrl_srvs/Float_IntResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0ee8479eb55758c93a0bf536101015ea"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "9f744029c1815d8e33a503bee0560de0"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 retval\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, retval);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, retval);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(retval);
    return size;
  }

  typedef boost::shared_ptr< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrl_srvs::Float_IntResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Float_IntResponse
typedef  ::hrl_srvs::Float_IntResponse_<std::allocator<void> > Float_IntResponse;

typedef boost::shared_ptr< ::hrl_srvs::Float_IntResponse> Float_IntResponsePtr;
typedef boost::shared_ptr< ::hrl_srvs::Float_IntResponse const> Float_IntResponseConstPtr;

struct Float_Int
{

typedef Float_IntRequest Request;
typedef Float_IntResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Float_Int
} // namespace hrl_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::Float_IntRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b1594d2b74931ef8fe7be8e2d594455";
  }

  static const char* value(const  ::hrl_srvs::Float_IntRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1b1594d2b74931efULL;
  static const uint64_t static_value2 = 0x8fe7be8e2d594455ULL;
};

template<class ContainerAllocator>
struct DataType< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/Float_IntRequest";
  }

  static const char* value(const  ::hrl_srvs::Float_IntRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 value\n\
\n\
";
  }

  static const char* value(const  ::hrl_srvs::Float_IntRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hrl_srvs::Float_IntResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0ee8479eb55758c93a0bf536101015ea";
  }

  static const char* value(const  ::hrl_srvs::Float_IntResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0ee8479eb55758c9ULL;
  static const uint64_t static_value2 = 0x3a0bf536101015eaULL;
};

template<class ContainerAllocator>
struct DataType< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/Float_IntResponse";
  }

  static const char* value(const  ::hrl_srvs::Float_IntResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 retval\n\
\n\
\n\
";
  }

  static const char* value(const  ::hrl_srvs::Float_IntResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hrl_srvs::Float_IntRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Float_IntRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hrl_srvs::Float_IntResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.retval);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Float_IntResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hrl_srvs::Float_Int> {
  static const char* value() 
  {
    return "9f744029c1815d8e33a503bee0560de0";
  }

  static const char* value(const hrl_srvs::Float_Int&) { return value(); } 
};

template<>
struct DataType<hrl_srvs::Float_Int> {
  static const char* value() 
  {
    return "hrl_srvs/Float_Int";
  }

  static const char* value(const hrl_srvs::Float_Int&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hrl_srvs::Float_IntRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f744029c1815d8e33a503bee0560de0";
  }

  static const char* value(const hrl_srvs::Float_IntRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hrl_srvs::Float_IntRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/Float_Int";
  }

  static const char* value(const hrl_srvs::Float_IntRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hrl_srvs::Float_IntResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f744029c1815d8e33a503bee0560de0";
  }

  static const char* value(const hrl_srvs::Float_IntResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hrl_srvs::Float_IntResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_srvs/Float_Int";
  }

  static const char* value(const hrl_srvs::Float_IntResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HRL_SRVS_SERVICE_FLOAT_INT_H

